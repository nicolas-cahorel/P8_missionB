package com.openclassrooms.p8_vitesse.data.entity

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey

/**
 * Data class representing a candidate entity for the Room database.
 * This class is used to map candidate details into the database.
 *
 * @property id The unique ID of the candidate, generated automatically by Room.
 * @property photoData The binary data of the candidate's profile picture.
 * @property firstName The candidate's first name.
 * @property lastName The candidate's last name.
 * @property phoneNumber The candidate's phone number, stored as a String to accommodate various formats.
 * @property emailAddress The candidate's email address.
 * @property dateOfBirth The candidate's date of birth, stored as a Long (timestamp) for better date handling.
 * @property expectedSalary The candidate's expected salary.
 * @property informationNote Additional notes or information about the candidate.
 * @property isFavorite Indicates whether the candidate is marked as a favorite.
 */
@Entity(tableName = "candidate")
data class CandidateDto(
    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "id")
    var id: Long = 0,  // The unique ID is auto-generated by Room.

    @ColumnInfo(name = "photo_data")
    var photoData: ByteArray,  // Stores the binary data of the candidate's profile picture.

    @ColumnInfo(name = "first_name")
    var firstName: String,  // Candidate's first name.

    @ColumnInfo(name = "last_name")
    var lastName: String,  // Candidate's last name.

    @ColumnInfo(name = "phone_number")
    var phoneNumber: String,  // Phone number stored as a string for flexibility (e.g., formatting, international numbers).

    @ColumnInfo(name = "email_address")
    var emailAddress: String,  // Candidate's email address.

    @ColumnInfo(name = "date_of_birth")
    var dateOfBirth: Long,  // Date of birth stored as a Unix timestamp (milliseconds).

    @ColumnInfo(name = "expected_salary")
    var expectedSalary: Int,  // Candidate's expected salary.

    @ColumnInfo(name = "information_note")
    var informationNote: String,  // Additional information about the candidate.

    @ColumnInfo(name = "is_favorite")
    var isFavorite: Boolean  // True if the candidate is marked as a favorite.
) {

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is CandidateDto) return false

        return id == other.id &&
                firstName == other.firstName &&
                lastName == other.lastName &&
                phoneNumber == other.phoneNumber &&
                emailAddress == other.emailAddress &&
                dateOfBirth == other.dateOfBirth &&
                expectedSalary == other.expectedSalary &&
                informationNote == other.informationNote &&
                isFavorite == other.isFavorite &&
                photoData.contentEquals(other.photoData)  // Use contentEquals to compare the array's content.
    }

    override fun hashCode(): Int {
        var result = id.hashCode()
        result = 31 * result + photoData.contentHashCode()  // Use contentHashCode for the array.
        result = 31 * result + firstName.hashCode()
        result = 31 * result + lastName.hashCode()
        result = 31 * result + phoneNumber.hashCode()
        result = 31 * result + emailAddress.hashCode()
        result = 31 * result + dateOfBirth.hashCode()
        result = 31 * result + expectedSalary
        result = 31 * result + informationNote.hashCode()
        result = 31 * result + isFavorite.hashCode()
        return result
    }
}